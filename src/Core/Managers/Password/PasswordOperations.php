<?php
/*******************************************************************************
 * Copyright(c) 2019 CodeLathe. All rights Reserved.
 *******************************************************************************/
namespace CodeLathe\Core\Managers\Password;

use CodeLathe\Application\ConfigRegistry;
use CodeLathe\Core\Data\DataController;
use CodeLathe\Core\Exception\DatabaseException;
use CodeLathe\Core\Exception\PasswordOpException;
use CodeLathe\Core\Exception\UserOpException;
use CodeLathe\Core\Messaging\EventManager;
use CodeLathe\Core\Messaging\Events\PasswordRecoveredEvent;
use CodeLathe\Core\Messaging\Events\PasswordResetEvent;
use CodeLathe\Core\Objects\User;
use CodeLathe\Core\Objects\UserCode;
use CodeLathe\Core\Utility\StringUtility;
use CodeLathe\Service\Mailer\MailerServiceInterface;
use Psr\Cache\CacheItemPoolInterface;
use Psr\Cache\InvalidArgumentException;
use Psr\Log\LoggerInterface;

class PasswordOperations
{
    /**
     * @var DataController
     */
    protected $dataController;

    /**
     * @var LoggerInterface
     */
    protected $logger;

    /**
     * @var EventManager
     */
    protected $eventManager;

    /**
     * @var MailerServiceInterface
     */
    protected $mailer;

    /**
     * @var ConfigRegistry
     */
    protected $configRegistry;

    /**
     * @var CacheItemPoolInterface
     */
    protected $cache;

    /**
     * UserOperations constructor.
     * @param DataController $dataController
     * @param LoggerInterface $logger
     * @param EventManager $eventManager
     * @param MailerServiceInterface $mailer
     * @param ConfigRegistry $configRegistry
     * @param CacheItemPoolInterface $cache
     */
    public function __construct(DataController $dataController,
                                LoggerInterface $logger,
                                EventManager $eventManager,
                                MailerServiceInterface $mailer,
                                ConfigRegistry $configRegistry,
                                CacheItemPoolInterface $cache)
    {
        $this->dataController = $dataController;
        $this->logger = $logger;
        $this->eventManager = $eventManager;
        $this->mailer = $mailer;
        $this->configRegistry = $configRegistry;
        $this->cache = $cache;
    }

    /**
     * Recover Password
     *
     * @param User $user
     * @return UserCode
     * @throws PasswordOpException
     * @throws UserOpException
     * @throws DatabaseException
     */
    public function recover(User $user) : UserCode
    {
        if ($user->getIsAutoGeneratedPassword()) {
            if ($this->dataController->getExternalIdentityCount($user->getId()) > 0)
                throw new UserOpException("Password cannot be recovered for this account. 
                                                    You have used an external identity provider such as Google or LinkedIn to connect to Airsend.
                                                    You must recover the password directly from external identity provider.");
            else
                throw new UserOpException("Password cannot be recovered for this account.");
        }
        // ... delete the user codes if any existing
        $this->dataController->deleteUserCode($user->getId(), UserCode::USER_CODE_TYPE_PWD_RESET);

        // ... generate reset code
        $code = StringUtility::generateRandomString(6,"23456789abcdefghjkmnpqrstuvwxyz");

        // ... set expiration for code
        $expires = date("Y-m-d H:i:s", strtotime('+24 hours'));

        // ... create the user code
        $userCode = UserCode::create($user->getId(), UserCode::USER_CODE_TYPE_PWD_RESET, $code, $expires);
        if (!$this->dataController->createUserCode($userCode)) {
            throw new PasswordOpException("Cannot create Reset Password Code");
        }

        // ... generate password recovered event
        $event = new PasswordRecoveredEvent($userCode);
        $this->eventManager->publishEvent($event);

        // ... return user code
        return $userCode;
    }

    /**
     * Reset Password
     *
     * @param int $userId
     * @param string $newPassword
     * @param string $resetCode
     * @return bool
     * @throws PasswordOpException
     * @throws UserOpException
     *  @throws DatabaseException
     */
    public function resetPassword(int $userId, string $newPassword, string $resetCode)
    {
        $user = $this->dataController->getUserById($userId);

        if (empty($user)) {
            $this->logger->debug("Invalid user for user id $userId");
            throw new UserOpException("Reset Password Failed");
        }

        // ... get the user code
        $userCode = $this->dataController->getUserCode($user->getId(), UserCode::USER_CODE_TYPE_PWD_RESET);

        // ... check if reset code passed is correct
        if (empty($userCode) || $resetCode !== $userCode->getCode()){
            $this->logger->debug("Invalid reset code for user id $userId");
            throw new PasswordOpException("Reset Password Failed");
        }

        // ... check if reset code is expired.
        if (!empty($userCode->getExpires())) {
            if (strtotime($userCode->getExpires()) < strtotime(date('Y-m-d H:i:s'))) {
                throw new PasswordOpException("Reset Code Expired. Please use forgot password to get new code.");
            }
        }

        // ... hash the password
        $passwordHash = "";
        if (!empty($newPassword)) {
            $passwordHash = password_hash($newPassword, PASSWORD_DEFAULT);
        }

        // ... update the user account with new password
        $this->setNewPasswordForUser($user, $passwordHash);

        // ... delete the user codes for reset password so the codes are invalid
        $this->dataController->deleteUserCode($user->getId(), UserCode::USER_CODE_TYPE_PWD_RESET);

        // ... publish reset password event
        $event = new PasswordResetEvent($user);
        $this->eventManager->publishEvent($event);

        return true;
    }

    /**
     * @param int $userId
     * @param string $currentPassword
     * @param string $newPassword
     * @return bool
     * @throws PasswordOpException
     * @throws DatabaseException
     */
    public function updatePassword(int $userId, string $currentPassword,  string $newPassword)
    {
        $user = $this->dataController->getUserById($userId);

        if (!isset($user) || !password_verify($currentPassword, $user->getPassword())) {
            throw new PasswordOpException("Invalid User or Password");
        }

        // ... hash the password
        $passwordHash = "";
        if (!empty($newPassword)) {
            $passwordHash = password_hash($newPassword, PASSWORD_DEFAULT);
        }

        // ... update the user account with new password
        $this->setNewPasswordForUser($user, $passwordHash);

        // ... publish reset password event
        $event = new PasswordResetEvent($user);
        $this->eventManager->publishEvent($event);

        return true;
    }

    /**
     * @param User $user
     * @param string $passwordHash
     * @throws PasswordOpException
     * @throws DatabaseException
     * @throws InvalidArgumentException
     */
    public function setNewPasswordForUser(User $user, string $passwordHash)
    {
        $user->setPassword($passwordHash);
        $user->setIsAutoGeneratedPassword(false);
        if (!$this->dataController->updateUser($user)){
            throw new PasswordOpException("Failed updating  password");
        }

        // ensure the cleanup of the login attempts history when the password is changed
        $prefix = 'failed_login_attempts__';
        $emailKey = $prefix . base64_encode($user->getEmail());
        $phoneKey = $prefix . base64_encode($user->getPhone());
        $this->cache->deleteItem($emailKey);
        $this->cache->deleteItem($phoneKey);
    }

    /**
     * @param UserCode $userCode
     * @throws DatabaseException
     * @throws \CodeLathe\Service\Mailer\Exceptions\InvalidEmailAddressException
     */
    public function sendRecoveryMessage(UserCode $userCode)
    {
        $user = $this->dataController->getUserById($userCode->getUserId());
        if (empty($user)){
            $this->logger->error("Invalid User Recovered Password");
        }

        // ... send password recovery email
        try {
            $resetUrl = rtrim($this->configRegistry->get('/app/ui/baseurl'), '/') . "/password.reset?" .
                        "user_id=" . $user->getId() .
                        "&reset_code=" . $userCode->getCode();
            $body = "<p>You recently requested to reset your password for your AirSend account.</p><p>Click the button below to reset your password.</p>";
            $body_after_button = "<p><b>Your password reset is valid only for the next 24 hours.</b></p>";
            $body_after_button .= "<p>If you did not request a password reset, please ignore this email.</p>";
            $this->logger->info("Sending password recovery email to " . $user->getEmail());

            $message = $this->mailer
                ->createMessage($user->getDisplayName() . " <" . $user->getEmail() . ">")
                ->subject('AirSend: Password Reset')
                ->from("noreply", "AirSend")
                ->body('general_template', [
                    'subject' => 'Airsend: Password Reset Code',
                    'display_name' => $user->getDisplayName(),
                    'byline_text' => '',
                    'html_body_text' => $body,
                    'html_body_after_button_text' => $body_after_button,
                    'button_url' => $resetUrl,
                    'button_text' => "Reset Password"
                    ]);
            $this->mailer->send($message);
            $this->logger->info("Password Recovery Email Sent to " . $user->getEmail());
        }
        catch(ASException $e){
            $this->logger->error(__CLASS__  .  " " . __FUNCTION__ . " " . $e->getMessage());
        }
    }


    /**
     * Send Password Reset Email
     *
     * @param User $user
     * @throws \CodeLathe\Service\Mailer\Exceptions\InvalidEmailAddressException
     */
    public function sendResetMessage(User $user)
    {
        // ... send password reset confirmation email.
        try {
            $body = "<p>You've successfully changed your AirSend Password.</p>";
            $this->logger->info("Sending password reset confirmation email to " . $user->getEmail());
            $message = $this->mailer
                ->createMessage($user->getDisplayName() . " <" . $user->getEmail() . ">")
                ->subject('Airsend: Your password was successfully reset')
                ->from("noreply", "AirSend")
                ->body('general_template', [
                    'subject' => 'Airsend: Your password was successfully reset',
                    'display_name' => $user->getDisplayName(),
                    'byline_text' => '',
                    'html_body_text' => $body,
                    'html_body_after_button_text' => '',
                    'button_url' => $this->configRegistry->get('/app/ui/baseurl'),
                    'button_text' => "Visit AirSend"
                ]);

            $this->mailer->send($message);
            $this->logger->info("Password Reset Confirmation Email Sent to " . $user->getEmail());
        }
        catch(ASException $e){
            $this->logger->error(__CLASS__  .  " " . __FUNCTION__ . " " . $e->getMessage());
        }
    }
}