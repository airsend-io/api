<?php declare(strict_types=1);
/*******************************************************************************
 * Copyright(c) 2019 CodeLathe. All rights Reserved.
 *******************************************************************************/
namespace CodeLathe\Core\Objects;

use CodeLathe\Application\ConfigRegistry;
use CodeLathe\Core\Authorization\AuthorizationHandler;
use CodeLathe\Core\Utility\ContainerFacade;
use CodeLathe\Core\Utility\Convert;
use League\OAuth2\Server\Entities\UserEntityInterface;

class User implements \JsonSerializable, ObjectInterface, UserEntityInterface
{

    const ACCOUNT_STATUS_BLOCKED                = 0;
    const ACCOUNT_STATUS_DISABLED               = 10;
    const ACCOUNT_STATUS_DELETED                = 20;
    const ACCOUNT_STATUS_PENDING_VERIFICATION   = 30;
    const ACCOUNT_STATUS_PENDING_FINALIZE       = 50;
    const ACCOUNT_STATUS_ACTIVE                 = 100;

    // online status of the user
    const ONLINE_STATUS_UNKNOWN     = 0;
    const ONLINE_STATUS_ACTIVE      = 1;
    const ONLINE_STATUS_AWAY        = 2;
    const ONLINE_STATUS_BUSY        = 3;
    const ONLINE_STATUS_OFFLINE     = 4;

    // permission for the user.
    CONST USER_ROLE_UNKNOWN         = 0;
    CONST USER_ROLE_PUBLIC          = 5;
    CONST USER_ROLE_VIEWER          = 10;
    CONST USER_ROLE_EDITOR          = 50;
    CONST USER_ROLE_SUB_ADMIN       = 90;
    CONST USER_ROLE_SERVICE_ADMIN   = 100;

    // trust level for the user
    CONST USER_TRUST_LEVEL_UNKNOWN  = 0;
    CONST USER_TRUST_LEVEL_BASIC    = 10;
    CONST USER_TRUST_LEVEL_FULL     = 100;


    //  is admin approval required before system can be used
    CONST APPROVAL_STATUS_PENDING   = 0;
    CONST APPROVAL_STATUS_APPROVED  = 10;

    const NOTIFICATIONS_CONFIG_ALL_UNREAD_MESSAGES_MASK = 0b01;
    const NOTIFICATIONS_CONFIG_MENTIONS_MASK = 0b10;

    /**
     * Here we define the mapping for possible notifications configs. The keys are the possible values that can come from
     * the client (documented on swagger). The values are the binary configs (look at the masks above). First binary
     * digit represents the mentions, and the second, represents the unread messages. The value 01 is not included (but
     * it will work if included) because we don't want to let the user chose to receive all the unread messages and don't
     * receive mentions.
     */
    const NOTIFICATIONS_CONFIG_MAP = [
        0 => 0b00, // no notifications
        1 => 0b10, // only for mentions
        2 => 0b11, // all unread messages
    ];

    const STATUS_MAP = [
        0 => 'Offline/invisible',
        1 => 'Online',
        2 => 'Busy',
        3 => 'Away'
    ];


    /**
     * User object as array
     *
     * @var array
     */
    protected $user;

    /**
     * @var string
     */
    protected $publicHash;

    protected static $serviceAdminUsers = null;

    /**
     * @var AuthorizationHandler
     */
    protected $authorizationManager;

    public function __construct()
    {
        $this->authorizationManager = ContainerFacade::get(AuthorizationHandler::class);
    }

    /**
     * @return int[]
     */
    public static function findServiceAdminUsers(): array
    {
        if (static::$serviceAdminUsers === null) {
            /** @var ConfigRegistry $config */
            $config = ContainerFacade::get(ConfigRegistry::class);
            static::$serviceAdminUsers = array_map(function ($item) {
                return (int) trim($item);
            }, explode(',', $config->get('/app/service_admin_users')));
        }

        return static::$serviceAdminUsers;
    }

    public static function isServiceAdmin(int $userId) {

        static::findServiceAdminUsers();
        return in_array($userId, static::$serviceAdminUsers);
    }



    /**
     *Create User
     *
     * @param null|string $email
     * @param null|string $phone
     * @param string $password
     * @param string $displayName
     * @param int $accountStatus
     * @param int $userRole
     * @param int $approvalStatus
     * @param bool $isAutoGeneratedPassword
     * @param bool|null $isEmailVerified
     * @return User
     */
    public static function create(?string $email, ?string $phone, string $password, string $displayName,
                                    int $accountStatus, int $userRole, int $approvalStatus, bool $isAutoGeneratedPassword, ?bool $isEmailVerified = false) : User
    {
        $instance = new self();
        $instance->user['email']            = $email;
        $instance->user['phone']            = $phone;
        $instance->user['password']         = $password;
        $instance->user['display_name']     = $displayName;
        $instance->user['has_avatar']       = false;
        $instance->user['user_role']        = $userRole;
        $instance->user['account_status']   = $accountStatus;
        $instance->user['approval_status']  = $approvalStatus;
        $instance->user['trust_level']      = User::USER_TRUST_LEVEL_UNKNOWN;
        $instance->user['online_status']    = User::ONLINE_STATUS_UNKNOWN;
        $instance->user['is_auto_pwd']      = $isAutoGeneratedPassword;
        $instance->user['is_terms_agreed']  = false;
        $instance->user['is_tour_complete'] = false;
        $instance->user['is_email_verified']= $isEmailVerified;
        $instance->user['is_phone_verified']= false;
        $instance->user['timezone']         = null;
        $instance->user['locale']           = null;
        $instance->user['date_format']      = null;
        $instance->user['time_format']      = null;
        $instance->user['lang_code']        = 'en';
        $instance->user['user_status']           = 1;
        $instance->user['user_status_message']   = '';
        $instance->user['invited_by']       = null;
        $instance->user['is_pwd_reset']     = false;
        $instance->user['is_locked']        = false;
        $instance->user['last_active_on']   = date('Y-m-d H:i:s');
        $instance->user['notifications_config'] = self::NOTIFICATIONS_CONFIG_MAP[2];
        $instance->user['created_on']       = date('Y-m-d H:i:s');
        $instance->user['updated_on']       = null;
        $instance->user['updated_by']       = null;
        return $instance;
    }

    public static function withDBData(array $a_record) : ?self
    {
        if(array_filter($a_record)){
            $instance = new self();
            $instance->loadWithDBData($a_record);
            return $instance;
        }
        else
            return null;
    }

    public function loadWithDBData(array $record) : void
    {
        $this->user['id']               = Convert::toIntNull($record['id']);
        $this->user['email']            = Convert::toStrNull($record['email']);
        $this->user['phone']            = Convert::toStrNull($record['phone']);
        $this->user['password']         = Convert::toStr($record['password']);
        $this->user['display_name']     = Convert::toStrNull($record['display_name']);
        $this->user['has_avatar']       = Convert::toBool($record['has_avatar']);
        $this->user['user_role']        = Convert::toIntNull($record['user_role']);
        $this->user['account_status']   = Convert::toIntNull($record['account_status']);
        $this->user['approval_status']  = Convert::toIntNull($record['approval_status']);
        $this->user['trust_level']      = Convert::toIntNull($record['trust_level']);
        $this->user['online_status']    = Convert::toIntNull($record['online_status']);
        $this->user['is_auto_pwd']      = Convert::toBool($record['is_auto_pwd']);
        $this->user['is_terms_agreed']  = Convert::toBool($record['is_terms_agreed']);
        $this->user['is_tour_complete'] = Convert::toBool($record['is_tour_complete']);
        $this->user['is_email_verified']= Convert::toBool($record['is_email_verified']);
        $this->user['is_phone_verified']= Convert::toBool($record['is_phone_verified']);
        $this->user['timezone']         = Convert::toStrNull($record['timezone']);
        $this->user['locale']           = Convert::toStrNull($record['locale']);
        $this->user['date_format']      = Convert::toStrNull($record['date_format']);
        $this->user['time_format']      = Convert::toStrNull($record['time_format']);
        $this->user['lang_code']        = Convert::toStrNull($record['lang_code']);
        $this->user['user_status']           = Convert::toIntNull($record['user_status']);
        $this->user['user_status_message']   = Convert::toStrNull($record['user_status_message']);
        $this->user['invited_by']       = Convert::toIntNull($record['invited_by']);
        $this->user['is_pwd_reset']     = Convert::toBool($record['is_pwd_reset']);
        $this->user['is_locked']        = Convert::toBool($record['is_locked']);
        $this->user['notifications_config'] = Convert::toIntNull($record['notifications_config']);
        $this->user['last_active_on']   = Convert::toStrNull($record['last_active_on']);
        $this->user['created_on']       = Convert::toStrNull($record['created_on']);
        $this->user['updated_on']       = Convert::toStrNull($record['updated_on']);
        $this->user['updated_by']       = Convert::toStrNull($record['updated_by']);
    }

    public function getId() : int
    {
        return (int) $this->user['id'];
    }

    public function setId(int $id) : void
    {
        $this->user['id'] = $id;
    }

    public function getEmail() :?string
    {
        return $this->user['email'];
    }

    public function setEmail(?string $email) : void
    {
        $this->user['email'] =  $email;
    }

    public function setDisplayName(string $name) : void
    {
        $this->user['display_name'] = $name;
    }

    public function getDisplayName() : string
    {
        return $this->user['display_name'];
    }

    public function getPhone() : ?string
    {
        return $this->user['phone'];
    }

    public function setPhone(?string $phone) : void
    {
        $this->user['phone'] = $phone;
    }

    public function getPassword() : string
    {
        return $this->user['password'] ?? '';
    }

    public function setPassword(string $value) : void
    {
        $this->user['password'] = $value;
    }

    public function getOnlineStatus() : int
    {
        return $this->user['online_status'];
    }

    public function setOnlineStatus(int $value) : void
    {
        $this->user['online_status'] = $value;
    }

    public function setUserRole(int $value) : void
    {
        $this->user['user_role'] = $value;
    }

    public function getUserRole() : int
    {
        return $this->user['user_role'];
    }

    public function getAccountStatus() : int
    {
        return $this->user['account_status'];
    }

    public function setAccountStatus(int $value) : void
    {
        $this->user['account_status'] = $value;
    }

    public function getTrustLevel() : int
    {
        return $this->user['trust_level'];
    }

    public function setTrustLevel(int $value) : void
    {
        $this->user['trust_level'] = $value;
    }

    public function getApprovalStatus() : int
    {
        return $this->user['approval_status'];
    }

    public function setApprovalStatus(int $value) : void
    {
        $this->user['approval_status'] = $value;
    }

    public function getIsTermsAgreed() : bool
    {
        return ($this->user['is_terms_agreed'] === 1 ||  $this->user['is_terms_agreed']? true : false);
    }

    public function setIsAutoGeneratedPassword(bool $value)  : void
    {
        $this->user['is_auto_pwd'] = ($value ? 1 : 0);
    }

    public function getIsAutoGeneratedPassword() : bool
    {
        return ($this->user['is_auto_pwd'] === 1 || $this->user['is_auto_pwd'] ? true : false);
    }

    public function setIsTermsAgreed(bool $value)  : void
    {
        $this->user['is_terms_agreed'] = ($value ? 1 : 0);
    }

    public function getIsTourComplete() : bool
    {
        return ($this->user['is_tour_complete'] === 1 || $this->user['is_tour_complete'] ? true : false);
    }

    public function setIsTourComplete(bool $value) : void
    {
        $this->user['is_tour_complete'] = ($value ? 1 : 0);
    }

    public function getDateFormat() : ?string
    {
        return $this->user['date_format'];
    }

    public function setDateFormat(?string $value) : void
    {
        $this->user['date_format'] = $value;
    }

    public function getTimeFormat() : ?string
    {
        return $this->user['time_format'];
    }

    public function setTimeFormat(?string $value) : void
    {
        $this->user['time_format'] = $value;
    }

    public function getIsPasswordReset() : bool
    {
        return ($this->user['is_pwd_reset'] === 1 || $this->user['is_pwd_reset'] ? true : false);
    }

    public function setIsPasswordReset(bool $value) : void
    {
        $this->user['is_pwd_reset'] = ($value ? 1 : 0);
    }

    public function getIsLocked() : bool
    {
        return ($this->user['is_locked'] === 1 ? true : false);
    }

    public function setIsLocked(bool $value) : void
    {
        $this->user['is_locked'] = ($value ? 1 : 0);
    }

    public function getLastActiveOn() : string
    {
        return $this->user['last_active_on'];
    }

    public function setLastActiveOn(?string $value) : void
    {
        if (!empty($value))
            $this->user['last_active_on'] = date('Y-m-d H:i:s', strtotime($value));
        else
            $this->user['last_active_on'] = null;
    }

    public function getCreatedOn() : string
    {
        return $this->user['created_on'];
    }

    public function setCreatedOn(string $value) : void
    {
        $this->user['created_on'] = $value;
    }

    public function getUpdatedOn() : ?string
    {
        return $this->user['updated_on'];
    }

    public function setUpdatedOn(?string $value) : void
    {
        if (!empty($value))
            $this->user['updated_on'] = date('Y-m-d H:i:s', strtotime($value));
        else
            $this->user['updated_on'] = null;
    }

    public function getUpdatedBy() :?string
    {
        return $this->user['updated_by'];
    }

    public function setUpdatedBy(?string $value) : void
    {
        $this->user['updated_by'] = $value;
    }

    public function getInvitedBy() :?int
    {
        return $this->user['invited_by'];
    }

    public function setInvitedBy(?int $value) : void
    {
        $this->user['invited_by'] = $value;
    }

    public function setHasAvatar(bool $hasAvatar) : void
    {
        $this->user['has_avatar'] = $hasAvatar;
    }

    public function getHasAvatar() : bool
    {
        return (empty($this->user['has_avatar']) ? false : boolval($this->user['has_avatar']));
    }

    public function getIsEmailVerified() : bool
    {
        return (empty($this->user['is_email_verified']) ? false : boolval($this->user['is_email_verified']));
    }

    public function setIsEmailVerified(bool $value) : void
    {
        $this->user['is_email_verified'] = $value;
    }

    public function getIsPhoneVerified() : bool
    {
        return (empty($this->user['is_phone_verified']) ? false : boolval($this->user['is_phone_verified']));
    }

    public function setIsPhoneVerified(bool $value) : void
    {
        $this->user['is_phone_verified'] = $value;
    }

    public function getUserRoleAsString() : string
    {
        switch($this->getUserRole())
        {
            case User::USER_ROLE_VIEWER:
                return "viewer";
                break;
            case User::USER_ROLE_EDITOR:
                return "editor";
                break;
            case User::USER_ROLE_SUB_ADMIN:
                return "sub admin";
                break;
            case User::USER_ROLE_SERVICE_ADMIN:
                return "service admin";
                break;
            case User::USER_ROLE_UNKNOWN;
                return "unknown";
                break;
        }
    }

    public function getEmailOrPhone() : string
    {
        if (!empty($this->getEmail()))
            return $this->getEmail();
        else if (!empty($this->getPhone()))
            return $this->getPhone();
        else
            return '';
    }

    public function setNotificationsConfig(int $config)
    {
        $this->user['notifications_config'] = $config;
    }

    public function setPublicHash(string $hash): void
    {
        $this->publicHash = $hash;
    }

    public function getPublicHash(): ?string
    {
        return $this->publicHash ?? null;
    }

    public function getTimezone(): ?string
    {
        return $this->user['timezone'];
    }

    public function setTimezone(string $timezone): void
    {
        $this->user['timezone'] = $timezone;
    }


    public function getArray() : array
    {
        return $this->user;
    }

    public function jsonSerialize() : array
    {
        return   $this->user;
    }

    public function getLocale(): ?string
    {
        return $this->user['locale'] ?? null;
    }

    public function setLocale(string $locale): void
    {
        $this->user['locale'] = $locale;
    }

    public function getStatus(): int
    {
        return $this->user['user_status'] ?? 1;
    }

    public function setStatus(int $status): void
    {
        $this->user['user_status'] = $status;
    }

    public function getStatusMessage(): string
    {
        return $this->user['user_status_message'] ?? '';
    }

    public function setStatusMessage(string $message): void
    {
        $this->user['user_status_message'] = $message;
    }

    public function getIdentifier()
    {
        return $this->getId();
    }

    public function can(string $action, $resource): bool
    {
        return $this->authorizationManager->authorize($this, $resource, $action);
    }

    public function cannot(string $action, $resource): bool
    {
        return !$this->authorizationManager->authorize($this, $resource, $action);
    }

}
