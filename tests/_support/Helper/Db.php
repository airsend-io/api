<?php

namespace Helper;

// here you can define custom actions
// all public methods declared in helper class will be available in $I

use Codeception\Module\Db as ParentDb;
use Codeception\TestInterface;
use CodeLathe\Core\Utility\StringUtility;
use Exception;
use Symfony\Component\Yaml\Yaml;

class Db extends ParentDb
{

    /**
     * @var array
     */
    protected $startDatabase;

    public function _before(TestInterface $test)
    {
        $this->config['populator'] = $this->config['cleanup_script'] ?? $this->config['populator'];
        parent::_before($test); // TODO: Change the autogenerated stub
    }

    protected function findFixtureFile(string $fixturePath):string
    {
        $dir = dirname(__FILE__, 3) . '/api/fixtures';
        return "$dir/{$fixturePath}.yml";
    }

    /**
     * @param string $table
     * @throws Exception
     */
    protected function truncateTable(string $table)
    {
        $query = "TRUNCATE TABLE $table";
        $sth = $this->_getDriver()->executeQuery($query, []);
        $sth->execute();
    }

    /**
     * @param string $fixturePath
     * @param bool|null $truncate
     * @throws Exception
     */
    public function loadFixture(string $fixturePath, ?bool $truncate = true)
    {

        $fixtureFile = $this->findFixtureFile($fixturePath);

        $fixtureData = Yaml::parseFile($fixtureFile);

        $sth = $this->_getDriver()->executeQuery('SET FOREIGN_KEY_CHECKS=0;', []);
        $sth->execute();

        foreach ($fixtureData as $table => $data) {
            if ($truncate) {
                $this->truncateTable($table);
            }
            foreach ($data as $row) {
                $row = $this->filterColumns($row);
                $this->haveInDatabase($table, $row);
            }
        }

        $sth = $this->_getDriver()->executeQuery('SET FOREIGN_KEY_CHECKS=1;', []);
        $sth->execute();
    }

    /**
     * @param string $table
     * @param array $criteria
     * @return array
     * @throws Exception
     */
    public function grabRowsFromDatabase(string $table, array $criteria = []): array
    {
        $query = $this->_getDriver()->select('*', $table, $criteria);
        $parameters = array_values($criteria);
        $this->debugSection('Query', $query);
        $this->debugSection('Parameters', $parameters);
        $sth = $this->_getDriver()->executeQuery($query, $parameters);

        return $sth->fetchAll(\PDO::FETCH_ASSOC);
    }

    /**
     * @param string $table
     * @param array $criteria
     * @return mixed
     * @throws Exception
     */
    public function grabFirstRowFromDatabase(string $table, array $criteria = []): array
    {
        return $this->grabRowsFromDatabase($table, $criteria)[0];
    }

    /**
     * Dumps the current database to an in memory array
     *
     * @throws Exception
     */
    protected function dumpDatabase(): array
    {
        $fixtureData = [];

        // first find all tables on the database
        $query = "SELECT table_name FROM information_schema.tables WHERE table_schema = 'asclouddb'";
        $sth = $this->_getDriver()->executeQuery($query, []);
        $tables = $sth->fetchAll(\PDO::FETCH_COLUMN, 0);

        // then select all rows from each of them
        foreach ($tables as $table) {
            $criteria = [];
            $query = $this->_getDriver()->select('*', $table, $criteria);
            $sth = $this->_getDriver()->executeQuery($query, []);
            $result = $sth->fetchAll(\PDO::FETCH_ASSOC);

            // skip empty tables
            if (empty($result)) {
                continue;
            }

            // save the fixture data
            $fixtureData[$table] = $result;
        }

        return $fixtureData;
    }

    /**
     * @throws Exception
     */
    public function startFixtureDeltaRecording()
    {
        $this->startDatabase = $this->dumpDatabase();
    }

    /**
     * @param string $fixturePath
     * @throws Exception
     */
    public function generateFixtures(string $fixturePath): void
    {

        $currentDatabase = $this->dumpDatabase();

        // if we recorded a start database, calculate the delta between them
        if ($this->startDatabase !== null) {
            foreach ($currentDatabase as $table => $rows) {
                if (array_key_exists($table, $this->startDatabase) && $this->startDatabase[$table] === $rows) {
                    unset($currentDatabase[$table]);
                }
            }
        }

        $fixtureYml = Yaml::dump($currentDatabase, 3, 2);

        $fixtureFile = $this->findFixtureFile($fixturePath);

        file_put_contents($fixtureFile, $fixtureYml);
    }

    /**
     * Finds columns that needs a filter for data, and transforms it, before inserting to the database
     *
     * @param $row
     * @return array
     */
    protected function filterColumns(array $row): array
    {
        return array_map(function($column) {
            if (!is_array($column) || !isset($column['filter'])) {
                return $column;
            }
            $params = $column['params'];
            return is_array($params) ? $this->{$column['filter']}(...$params) : $this->{$column['filter']}($params);
        }, $row);
    }

    protected function passwordFilter(string $password): string
    {
        return password_hash($password, PASSWORD_DEFAULT);
    }

    protected function randStringFilter(int $length = 6, string $keyspace = '0123456789abcdefghijklmnopqrstuvwxyz')
    {
        return StringUtility::generateRandomString($length, $keyspace);
    }

}